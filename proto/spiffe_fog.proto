syntax = "proto3";

option go_package = "github.mjlshen/spiffe_fog/workload";

import "google/protobuf/struct.proto";

service SpiffeWorkloadAPI {
  /////////////////////////////////////////////////////////////////////////
  // JWT-SVID Profile
  /////////////////////////////////////////////////////////////////////////

  // Fetch JWT-SVIDs for all SPIFFE identities the workload is entitled to,
  // for the requested audience. If an optional SPIFFE ID is requested, only
  // the JWT-SVID for that SPIFFE ID is returned.
  rpc FetchJWTSVID(JWTSVIDRequest) returns (JWTSVIDResponse);

  // Fetches the JWT bundles, formatted as JWKS documents, keyed by the
  // SPIFFE ID of the trust domain. As this information changes, subsequent
  // messages will be streamed from the server.
  rpc FetchJWTBundles(JWTBundlesRequest) returns (stream JWTBundlesResponse);

  // Validates a JWT-SVID against the requested audience. Returns the SPIFFE
  // ID of the JWT-SVID and JWT claims.
  rpc ValidateJWTSVID(ValidateJWTSVIDRequest) returns (ValidateJWTSVIDResponse);
}

message JWTSVIDRequest {
  // Required. The audience(s) the workload intends to authenticate against.
  repeated string audience = 1;

  // Optional. The requested SPIFFE ID for the JWT-SVID. If unset, all
  // JWT-SVIDs to which the workload is entitled are requested.
  string spiffe_id = 2;
}

// The JWTSVIDResponse message conveys JWT-SVIDs.
message JWTSVIDResponse {
  // Required. The list of returned JWT-SVIDs.
  repeated JWTSVID svids = 1;
}

// The JWTSVID message carries the JWT-SVID token and associated metadata.
message JWTSVID {
  // Required. The SPIFFE ID of the JWT-SVID.
  string spiffe_id = 1;

  // Required. Encoded JWT using JWS Compact Serialization.
  string svid = 2;

  // Optional. An operator-specified string used to provide guidance on how this
  // identity should be used by a workload when more than one SVID is returned.
  // For example, `internal` and `external` to indicate an SVID for internal or
  // external use, respectively.
  string hint = 3;
}

// The JWTBundlesRequest message conveys parameters for requesting JWT bundles.
// There are currently no such parameters.
message JWTBundlesRequest { }

// The JWTBundlesReponse conveys JWT bundles.
message JWTBundlesResponse {
  // Required. JWK encoded JWT bundles, keyed by the SPIFFE ID of the trust
  // domain.
  map<string, bytes> bundles = 1;
}

// The ValidateJWTSVIDRequest message conveys request parameters for
// JWT-SVID validation.
message ValidateJWTSVIDRequest {
  // Required. The audience of the validating party. The JWT-SVID must
  // contain an audience claim which contains this value in order to
  // succesfully validate.
  string audience = 1;

  // Required. The JWT-SVID to validate, encoded using JWS Compact
  // Serialization.
  string svid = 2;
}

// The ValidateJWTSVIDReponse message conveys the JWT-SVID validation results.
message ValidateJWTSVIDResponse {
  // Required. The SPIFFE ID of the validated JWT-SVID.
  string spiffe_id = 1;

  // Required. Claims contained within the payload of the validated JWT-SVID.
  // This includes both SPIFFE-required and non-required claims.
  google.protobuf.Struct claims = 2;
}
